---
title: "Clustering i ACP"
author: "Alba Linares y Maria Àngels"
format: html
editor: visual
---

## Presentació de les Dades:

En primer lloc, el repositori on trobem tota la informació d'aquest projecte és <https://github.com/mariangelsllobera/Inferencia-Multivariante.git>

Ara, carreguem el nostre DS, basat en observacions de diamants:

```{r, echo=FALSE, warning = F}
library(ggplot2)
library(tibble)
library(dplyr)
glimpse(diamonds)
```

La **pregunta** què volem respondre amb aquest conjunt de dades és quin

## Anàlisi exploratòria de les dades:

Facem un petit resum i anàlisi exploratòria de les nostres dades. Notem que ja estan en format tidy: tenim 53940 observacions de 10 variables.

Recordem que les variables del nostre dataset són

-   *carat*: El pes del diamant en quirats. Un quilate és una unitat de mesura de pes utilitzada en gemologia i joieria per mesurar diamants i altres pedres precioses. Un quilate equival a 0.2 grams o 200 mil·ligrams. És important tenir en compte que el pes d'un diamant no és l'únic factor que determina el seu valor; altres factors com la claredat, el color i el tall també són fonamentals.

-   *cut*: La qualitat del tall del diamant, que pot tenir els nivells següents: "Fair", "Good", "Very Good", "Premium" i "Ideal".

-   *color*: El color del diamant, que es codifica en lletres de la "J" (pitjor) a la "D" (millor).

-   *clarity*: La claredat del diamant, que pot tenir els nivells següents: "I1" (la pitjor) fins a "IF" (la millor).

-   *depth*: La profunditat total del diamant com a percentatge del seu diàmetre.

-   *table*: L'amplada de la part superior del diamant expressat com un percentatge del diàmetre total.

-   *price*: El preu del diamant en dòlars nord-americans.

-   *x*: La longitud en mil·límetres.

-   *y*: L'amplada en mil·límetres.

-   *z*: La profunditat en mil·límetres.

Aquestes variables s'utilitzen habitualment en anàlisi de diamants i poden ser útils per a l'avaluació de qualitat i preus de diamants en funció de les seves característiques.

Vegem com són aquestes variables:

```{r, echo = FALSE}
summary(diamonds)
dim(diamonds)
```

Com tenim moltes observacions considerarem un subconjunt del dataset de forma aleatòria. Seleccionarem 700 mostres aleatòries atès que el df original té massa observacions per a després poder realitzar els clusterings.

```{r}
set.seed(123)
diamants <-  diamonds[sample(nrow(diamonds), 500, replace = FALSE),]
diamants
```

Cream una nova variable "price_grups" que emagatzema els preus dels diamants per rangs.

```{r}
diamants$price_grup <- cut(diamants$price, breaks = c(0,1000,2500, 5000, 10000, 15000, 20000, Inf),
                             labels = c("0-1000", "1000-2500","25001-5000", "5001-10000", "10001-15000", "15001-20000", "20001+"))

# Visualizem la distribució dels diamants en cada rang de preus
ggplot(diamants, aes(x = price_grup, fill = price_grup)) +
  geom_bar() +
  labs(title = "Distribució dels diamants en diferents rangs de preus",
       x = "Rang de preus",
       y = "nombre de diamants")
```

Llavors, tenim 7 variables quantitatives: carat, depth, table, price, x, y, z. A més, trobem una variable qualitativa: color, amb 7 possibles nivells; i una d'ordinal: cut.

```{r}
diamants %>% 
  ggplot(aes(x = cut)) +
  geom_bar(fill="blue") + 
  labs(x="Qualitat del tall del diamant", y="Nombre de diamants") +
  theme_bw() +
  theme(axis.text = element_text(size=20),
        axis.title = element_text(size=20, face = "bold")) 
```

La majoria de diamants del nostre DS són de qualitat alta.

```{r}
diamants %>% 
  ggplot(aes(x = color)) + 
  geom_bar(fill='pink') +
  labs(x="Color del diamant", y="Nombre de diamants") +
  theme_bw() +
  theme(axis.text = element_text(size=20),
        axis.title = element_text(size=20, face = "bold"))
```

Respecte al color, vegem que hi ha més diversitat, però el color J és el que manco unitats té.

Vegem la distribució de les dades en funcio del color i de cut mitjançant un diagrama de mosaic.

```{r,echo=FALSE}

library(vcd)

a<- diamants %>%

select(color,cut) %>%

na.omit()

a2<- table(a)

mosaicplot(a2,shade=TRUE, main="")

```

Estudiem la distribució dels diamants en funció del preu:

```{r}
ggplot(data=diamants) + 
  geom_histogram(binwidth=500, aes(x=price)) + 
  ggtitle("Distribució dels preus dels diamants") + 
  xlab("Preu dels diamants") + 
  ylab("Freqüència") + 
  theme_minimal()
```

Aquesta és una distribució de cua llarga, amb una concentració elevada d'observacions per sota dels 5.000.

```{r}
ggplot(diamants, aes(x = carat, y = price, color = color)) +
  geom_point() +
  labs(title = "Scatterplot of Diamond Carat vs Price",
       x = "Carat",
       y = "Price")
```

Sembla que, indistintivament del color del diamant, el preu tendeix a augmentar quan carat creix.

```{r}
ggplot(diamants, aes(x = carat, fill = color)) +
  geom_histogram(binwidth = 0.5, position = "identity", alpha = 0.7) +
  labs(title = "Histogram of Diamond Carat vs Frequency",
       x = "Carat",
       y = "Frequency") 
```

La distribució és semblant a la dels preus (de cua llarga).

```{r}
mean_values <- diamants %>%
  group_by(cut) %>%
  summarize(mean_carat = mean(carat))

ggplot(diamants, aes(x = cut, y = carat, fill = cut)) +
  geom_violin(alpha = 0.7) +
  geom_point(data = mean_values, aes(x = cut, y = mean_carat),
             color = "black", size = 3, shape = 19) +  
  labs(title = "Violin Plot of Diamond Cut vs Carat",
       x = "Diamond Cut",
       y = "Carat") +
  scale_fill_manual(values = c("#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e")) +  # Custom color palette
  theme_minimal()
```

Les mitjanes de les carat són molt semblants, si les comparam entre qualitats del tall. Ara bé, les distribucions són prou diferents, excepte les de 'Very good' i 'Premium'.

Vegem quina correlació hi ha entre les variables quantitatives

```{r,echo=FALSE}
library(ggcorrplot)

diamants %>%

na.omit(.) %>%

select(carat, depth, price,x,y,z) %>%

cor(.) %>%

ggcorrplot(., hc.order = TRUE, type = "lower", colors = c("#6D9EC1","yellow", "#E46726"))

```

Notem que la variable carat (el pes del diamant amb quilats) està molt correlacionada amb les dimensions d'aquest (x,y i z), la qual cosa té sentit. També estan molt correlacionades positivament les variables x,y,z, carat i preu.

També vegem que les variables depth i table tenen una mica de correlació negativa.

## Anàlisi de Clustering

### Clúster particional 

Primer farem alguns canvis en el data set per poder treballar amb ell. Mutam les variables "cut" i "clarity" a variables del tipus integer.

```{r}
diamants_subset <-  diamants%>% 
  mutate(cut = as.integer(cut), clarity = as.integer(clarity)) %>% 
  select(-color,-price_grup)%>% 
   na.omit()
```

#### Anàlisi de les components principals

```{r}
library(ggplot2)
library("factoextra")
dades.acp <- prcomp(diamants_subset, scale = TRUE)
```

```{r}
lambdas=get_eigenvalue(dades.acp)
lambdas
```

Notem que les dues primeres components sumen més del 72% de la variança.

```{r}
dades.acp$rotation
```

Les variables "carat","price","x", "y" i "z" tenen molt de pes a la primera component principal. Notem que a la segona component té molt de pes la variable "cut".

#### Estimació del nombre K òptim

Una forma senzilla d'estimar el nombre K òptim de clústers quan no es disposa d'informació addicional en la qual basar-se és aplicar l'algorisme per a un rang de valors de K, identificant aquell a partir del qual la reducció en la suma total de variància intraclúster deixa de ser substancial.

Usarem la funció fviz_nbclust() que automatitza aquest procés. En aquest cas, donat que es sospita de la presència d'outliers, s'emplea la distància de Manhattan com a mesura de similitud.

```{r}
library(factoextra)

fviz_nbclust(diamants_subset, kmeans, method = "wss")
```

```{r}
fviz_nbclust(diamants_subset, kmeans, method = "silhouette")
```

```{r}
fviz_nbclust(diamants_subset, kmeans, method = "gap")
```

Pel mètode del colze, concloem que el nombre òptim de clusters és k=2.

#### K-means clustering(Lloyd)

```{r}
set.seed(123)
diamants_scale <- scale(diamants_subset, center = TRUE, scale = TRUE)
diamants_cluster <- kmeans(diamants_subset, centers = 2, algorithm = "Lloyd")
diamants_subset$cluster <- diamants_cluster$cluster
fviz_cluster(diamants_cluster, data = diamants_subset,geom = "point")
```

```{r}
diamants_subset %>% 
  group_by(cluster) %>% 
  summarise_all(mean)
```

Vegem que la diferència principal dels clusters rau a carat i en el preu.

#### K-medoids clustering (PAM)

Facem ara el clustering fent us del mètode K-medoids (PAM). K-medoids és un mètode de clustering molt semblant a K-means pel fet que tots dos agrupen les observacions en K clusters, on K és un valor preestablert per l'analista. La diferència rau en què en K-medoids cada cluster està representat per una observació present en el cluster, mentre que en K-means cada cluster està representat pel seu centroid, que correspon al promig de totes les observacions del cluster, però sense cap en particular.

```{r}
set.seed(123)
library(cluster)
pam_clusters <- pam(x = diamants_subset, k = 2, metric = "manhattan") 
pam_clusters 
```

```{r}
medoids <- prcomp(diamants_subset)$x 
# Es seleccionen únicament las projeccions de les observacions que son medoids 
medoids <- medoids[rownames(pam_clusters$medoids), c("PC1", "PC2")] 
medoids <- as.data.frame(medoids) 
colnames(medoids) <- c("x", "y")
fviz_cluster(object = pam_clusters, data = diamants_subset, ellipse.type = "t",  geom = "point", 
repel = F) + 
theme_bw() + 
geom_point(data = medoids, color = "black", size = 2) + 
theme(legend.position = "none") 
```

Notem que podem distigir dos grups diferenciats.

### Hierarchical clustering

El clustering jeràrquic és una alternativa als mètodes de clustering de partició que no requereixen que es preespecifiqui el nombre de clusters. Farem el de tipus aglomeratiu, comença a la base de l'arbre, on cada observació forma un cluster individual, els clusters es van combinant a mesura que l'estructura creix fins a convergir en una única "branca" central.

El nostre objectiu es predir el rang de preu que tenen els diamants mitjançant l'informació que ens proporcionen les altres variables.

Com hem vist abans al summary els valors de la variables varien molt per el que és convenient escalarles.

Aleshores, com la magnitud entre variables difereix de forma notable entre variables és convenient escalarles abans de fer el clustering.

```{r}
#primer seleccionam nomes les variables que ens interessen pel clustering
dades <- diamants_subset %>%
  select(-price,-x,-y,-z)
dades <- scale(dades, center = TRUE, scale = TRUE)
diss <- dist(dades, method = "manhattan")
```

Vegem els dendogrames resultants amb 3 enllaços diferents:

```{r}
hc_completo <- hclust(d = diss, method = "complete") 
fviz_dend(x = hc_completo, k = 5, cex = 0.6,
              main="Dendograma complet") +
 geom_hline(yintercept = 13, linetype = "dashed")
```

Estudiem si els diamants que comparteixen clúster tenen preus semblants.

```{r}
clusters <- cutree(tree = hc_completo, k = 5) 
table(clusters, diamants$price_grup, dnn = list("clusters", "preu")) 
```

Molts dels diamants amb preus al rang 0-1000 cauen en el clúster 1. Notem que a mesura que el rang de preu té un valor més elevat els diamants es troben als clústers amb nombres més alts. Per tant hem trobat cert patró en la distribució dels preus dels diamants.

Vegem què passa si usem l'enllaç mitjà:

```{r}
hc_average  <- hclust(d = diss, method = "average") 
fviz_dend(x = hc_average, cex = 0.6,
              main="Dendograma mitjà") 
```

```{r}
clusters <- cutree(tree = hc_average, k = 5) 
table(clusters, diamants$price_grup, dnn = list("clusters", "preu")) 
```

```{r}
hc_single   <- hclust(d = diss, method = "single")
fviz_dend(x = hc_single, cex = 0.6, 
  main="Dendograma single") 
```

```{r}
clusters <- cutree(tree = hc_single, k = 5) 
table(clusters, diamants$price_grup, dnn = list("clusters", "preu")) 
```

```{r}
hc_ward   <- hclust(d = diss, method = "ward")
fviz_dend(x = hc_ward, cex = 0.6, 
  main="Dendograma ward") 
```

```{r}
clusters <- cutree(tree = hc_ward, k = 5) 
table(clusters, diamants$price_grup, dnn = list("clusters", "preu")) 
```

```{r}
# Matriz de distancias euclídeas  
cor(x = diss, cophenetic(hc_completo)) 
cor(x = diss, cophenetic(hc_average)) 
cor(x = diss, cophenetic(hc_single)) 
cor(x = diss, cophenetic(hc_ward)) 
```
